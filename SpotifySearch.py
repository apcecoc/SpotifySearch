from .. import loader, utils
from telethon.tl.types import Message, InputMediaUploadedDocument
from telethon.tl.types import DocumentAttributeAudio
import requests
from urllib.parse import quote
import io

__version__ = (1, 0, 1)
#       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
#
#              ¬© Copyright 2025
#           https://t.me/apcecoc
# 
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

@loader.tds
class SpotifySearchMod(loader.Module):
    """Spotify Track Search and Download"""

    strings = {
        "name": "SpotifySearch",
        "enter_query": "üéµ Enter a query to search for Spotify tracks:",
        "search_error": "‚ùå Error in API response format",
        "not_found": "üòï Nothing found",
        "search_error_generic": "‚ùå Error during search: {error}",
        "found_tracks": "üéµ Found tracks: {count}\nSelect a track for more information:",
        "track_info": """
üéµ <b>Title:</b> {title}
üë§ <b>Artist:</b> {artist}
üíø <b>Album:</b> {album}
‚è±Ô∏è <b>Duration:</b> {duration}
üîó <b>Link:</b> {link}
        """,
        "download_error": "‚ùå Error downloading: {error}",
        "download_success": "‚úÖ Track successfully downloaded!",
        "download_failed": "‚ùå Failed to download track",
        "downloading": "‚è≥ Downloading track..."
    }

    strings_ru = {
        "name": "SpotifySearch",
        "enter_query": "üéµ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤ Spotify:",
        "search_error": "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞ API",
        "not_found": "üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        "search_error_generic": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {error}",
        "found_tracks": "üéµ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {count}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        "track_info": """
üéµ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {artist}
üíø <b>–ê–ª—å–±–æ–º:</b> {album}
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {link}
        """,
        "download_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {error}",
        "download_success": "‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
        "download_failed": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫",
        "downloading": "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞..."
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "SEARCH_LIMIT", 50, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"
        )
        self.search_results = {}
        self.current_search = None

    def format_duration(self, seconds: int) -> str:
        minutes = seconds // 60
        remaining_seconds = seconds % 60
        return f"{minutes}:{remaining_seconds:02d}"

    async def spotifycmd(self, message: Message):
        """<–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞> –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ Spotify."""
        query = utils.get_args_raw(message)
        if not query:
            await self.inline.form(
                message=message,
                text=self.strings["enter_query"],
                reply_markup=[
                    [{"text": "üîç –ü–æ–∏—Å–∫", "input": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞:"}]
                ],
                silent=True,
                ttl=60
            )
        else:
            await self.search_and_show_tracks(message, query)

    async def spotifydlcmd(self, message: Message):
        """<—Å—Å—ã–ª–∫–∞> –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ Spotify –ø–æ —Å—Å—ã–ª–∫–µ. –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        url = utils.get_args_raw(message)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not url and message.is_reply:
            reply = await message.get_reply_message()
            url = reply.raw_text
            
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å–∏–º –µ—ë —É–∫–∞–∑–∞—Ç—å
        if not url:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track_id = url.split("/")[-1].split("?")[0]
            response = requests.get(f"https://api.paxsenix.biz.id/spotify/track?id={track_id}")
            response.raise_for_status()
            track = response.json()
            
            duration_seconds = track['duration_ms'] // 1000
            artist_name = ', '.join(a['name'] for a in track['artists'])
            track_name = track['name']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫
            await utils.answer(message, self.strings["downloading"])
            response = requests.get(f"https://api.paxsenix.biz.id/dl/spotify?url={quote(url)}&serv=spotify")
            data = response.json()

            if data.get("ok"):
                audio_response = requests.get(data["directUrl"])
                audio_content = io.BytesIO(audio_response.content)
                audio_content.name = f"{artist_name} - {track_name}.m4a"

                attributes = [
                    DocumentAttributeAudio(
                        duration=duration_seconds,
                        title=track_name,
                        performer=artist_name,
                        waveform=None
                    )
                ]

                await self._client.send_file(
                    message.chat_id,
                    audio_content,
                    attributes=attributes,
                    title=track_name,
                    performer=artist_name,
                    supports_streaming=True,
                    mime_type='audio/mp4',
                    caption=f"üéµ {artist_name} - {track_name}"
                )
                
                await utils.answer(message, self.strings["download_success"])
            else:
                await utils.answer(message, self.strings["download_failed"])
        except Exception as e:
            await utils.answer(message, self.strings["download_error"].format(error=str(e)))



    async def search_and_show_tracks(self, message: Message, query: str):
        try:
            response = requests.get(
                f"https://api.paxsenix.biz.id/spotify/search?q={quote(query)}",
                headers={"Accept": "application/json"}
            )
            response.raise_for_status()
            data = response.json()

            if "tracks" not in data or "items" not in data["tracks"]:
                await utils.answer(message, self.strings["search_error"])
                return

            tracks = data["tracks"]["items"]
            self.search_results[message.chat_id] = tracks
            self.current_search = query

            if not tracks:
                await utils.answer(message, self.strings["not_found"])
                return

            await self.show_search_results(message, tracks)

        except Exception as e:
            await utils.answer(message, self.strings["search_error_generic"].format(error=str(e)))

    async def show_search_results(self, message, tracks):
        markup = []
        for track in tracks[:self.config["SEARCH_LIMIT"]]:
            artist_name = track["artists"][0]["name"] if track["artists"] else "Unknown Artist"
            track_name = track["name"] if track["name"] else "Unknown Track"
            
            markup.append([{
                "text": f"üéµ {track_name} - {artist_name}",
                "callback": self.show_track_details,
                "args": (track["id"],)
            }])

        await self.inline.form(
            message=message,
            text=self.strings["found_tracks"].format(count=len(tracks)),
            reply_markup=markup
        )

    async def show_track_details(self, call, track_id: str):
        try:
            response = requests.get(f"https://api.paxsenix.biz.id/spotify/track?id={track_id}")
            response.raise_for_status()
            track = response.json()

            duration_seconds = track['duration_ms'] // 1000
            formatted_duration = self.format_duration(duration_seconds)
            
            artist_name = ', '.join(a['name'] for a in track['artists'])
            track_name = track['name']

            text = self.strings["track_info"].format(
                title=track_name,
                artist=artist_name,
                album=track['album']['name'],
                duration=formatted_duration,
                link=track['external_urls']['spotify']
            )

            markup = [
                [{"text": "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", "callback": self.download_track, "args": (
                    track['external_urls']['spotify'],
                    track_name,
                    artist_name,
                    duration_seconds
                )}]
            ]

            await call.edit(text=text, reply_markup=markup)
        except Exception as e:
            await call.edit(text=self.strings["search_error_generic"].format(error=str(e)))

    async def download_track(self, call, url: str, title: str, artist: str, duration: int):
        try:
            await call.edit(text=self.strings["downloading"])
            response = requests.get(f"https://api.paxsenix.biz.id/dl/spotify?url={quote(url)}&serv=spotify")
            data = response.json()

            if data.get("ok"):
                audio_response = requests.get(data["directUrl"])
                audio_content = io.BytesIO(audio_response.content)
                audio_content.name = f"{artist} - {title}.m4a"

                attributes = [
                    DocumentAttributeAudio(
                        duration=duration,
                        title=title,
                        performer=artist,
                        waveform=None
                    )
                ]

                await self._client.send_file(
                    call.form["chat"],
                    audio_content,
                    attributes=attributes,
                    title=title,
                    performer=artist,
                    supports_streaming=True,
                    mime_type='audio/mp4',
                    caption=f"üéµ {artist} - {title}"
                )
                
                await call.edit(text=self.strings["download_success"])
            else:
                await call.edit(text=self.strings["download_failed"])
        except Exception as e:
            await call.edit(text=self.strings["download_error"].format(error=str(e)))
